---
- name: KubeSphere | Checking core components (1)
  shell: >
    kubectl get deploy -n default ks-account
  register: check_account
  failed_when: "check_account.stderr and 'NotFound' not in check_account.stderr"
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: KubeSphere | Checking core components (2)
  shell: >
    kubectl get deploy -n default ks-apigateway
  register: check_apigateway
  failed_when: "check_apigateway.stderr and 'NotFound' not in check_apigateway.stderr"
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: KubeSphere | Checking core components (3)
  shell: >
    kubectl get deploy -n default ks-account -o jsonpath='{.spec.replicas}'
  register: check_account_replicas
  failed_when: "check_account_replicas.stderr and 'NotFound' not in check_account_replicas.stderr"
  when:
    - check_account.rc == 0
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: KubeSphere | Checking core components (4)
  shell: >
    kubectl get deploy -n default ks-apigateway -o jsonpath='{.spec.replicas}'
  register: check_apigateway_replicas
  failed_when: "check_apigateway_replicas.stderr and 'NotFound' not in check_apigateway_replicas.stderr"
  when:
    - check_apigateway.rc == 0
  delegate_to: "{{ groups['kube-master'][0] }}"

- block:
  - name: KubeSphere | Updating ks-core status
    shell: >
      kubectl patch cc ks-installer
      --type merge
      -p '{"status": {"core": {"migration": true}}}'
      -n default
    register: cc_result
    failed_when: "cc_result.stderr and 'Warning' not in cc_result.stderr"
    until: cc_result is succeeded
    retries: 5
    delay: 3
  - set_fact:
      ks_upgrade: True
  when:
    - check_account.rc == 0
    - check_apigateway.rc == 0
    - check_account_replicas.stdout != "0"
    - check_apigateway_replicas.stdout != "0"
    - "'NotFound' not in check_account.stderr"
    - "'NotFound' not in check_apigateway.stderr"
    - "'NotFound' not in check_account_replicas.stderr"
    - "'NotFound' not in check_apigateway_replicas.stderr"
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: KubeSphere | Creating KubeSphere directory
  file:
    path: "{{ helm_charts_dir }}"
    state: directory
    mode: 0755
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: KubeSphere | Getting installation init files
  copy:
    src: "{{ item }}"
    dest: "{{ helm_charts_dir }}/"
  loop:
    - "ks-init"
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: KubeSphere | Initing KubeSphere
  shell: "kubectl apply -f {{ helm_charts_dir }}/ks-init/{{ item }}"
  loop:
    - "role-templates.yaml"
  register: init_ks_result
  failed_when: "init_ks_result.stderr and 'already exists' not in init_ks_result.stderr and 'Warning' not in init_ks_result.stderr"
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: KubeSphere | Generating kubeconfig-admin
  shell: >
    /bin/bash {{ helm_charts_dir }}/ks-init/generate-kubeconfig.sh
  when:
    - openpitrix.enabled is defined and openpitrix.enabled
  delegate_to: "{{ groups['kube-master'][0] }}"
  