---
- name: KubeSphere | Creating KubeSphere directory
  file:
    path: "{{ helm_charts_dir }}"
    state: directory
    mode: 0755
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: KubeSphere | Getting installation init files
  copy:
    src: "{{ item }}"
    dest: "{{ helm_charts_dir }}/"
  loop:
    - "jwt-script"
  delegate_to: "{{ groups['kube-master'][0] }}"

# https://tools.ietf.org/html/rfc7518#section-3.2
# A key of the same size as the hash output (for instance, 256 bits for"HS256") or larger MUST be used with this algorithm.
- name: KubeSphere | Creating KubeSphere Secret
  shell: >
    dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/" | tr -d '\n' | dd bs=32 count=1 2>/dev/null
  register: ks_secret
  delegate_to: "{{ groups['kube-master'][0] }}"


- name: KubeSphere | Creating KubeSphere Secret
  set_fact:
    ks_secret_str: "{{ ks_secret.stdout }}"
  when:
    - (authentication is not defined and authentication.jwtSecret is not defined) or authentication.jwtSecret == ""
  delegate_to: "{{ groups['kube-master'][0] }}"


- name: KubeSphere | Creating KubeSphere Secret
  set_fact:
    ks_secret_str: "{{ authentication.jwtSecret }}"
  when:
    - authentication is defined and authentication.jwtSecret is defined and authentication.jwtSecret != ""
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: KubeSphere | Enabling Token Script
  file:
    path: "{{ helm_charts_dir }}/jwt-script/jwt.sh"
    mode: 0755
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: KubeSphere | Getting KubeSphere Token
  shell: >
    /bin/bash {{ helm_charts_dir }}/jwt-script/jwt.sh  {{ ks_secret_str }} '{"email": "admin@troila.io","username": "admin","token_type": "static_token"}'
  register: ks_token
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: KubeSphere | Checking KubeSphere secrets
  shell: kubectl get secrets -n {{ helm_install_namespace }}
  register: kubesphere_secrets
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: KubeSphere | Deleting KubeSphere secret
  shell: >
    kubectl delete secrets -n {{ helm_install_namespace }} kubesphere-secret
  when:
    - kubesphere_secrets.stdout.find("kubesphere-secret") != -1
    - authentication is defined and authentication.jwtSecret is defined and authentication.jwtSecret != ""
  delegate_to: "{{ groups['kube-master'][0] }}"

- name: KubeSphere | Creating components token
  shell: kubectl create secret generic kubesphere-secret
    --from-literal=token={{ ks_token.stdout }}
    --from-literal=secret={{ ks_secret_str }}
    -n {{ helm_install_namespace }}
  register: secret_status
  failed_when: "secret_status.stderr and 'already exists' not in secret_status.stderr"
  delegate_to: "{{ groups['kube-master'][0] }}"