{% if master_num is defined and master_num != "0" %}
replicaCount: {{ master_num }}
{% else %}
replicaCount: 1
{% endif %}

image:
  ks_controller_manager_repo: {{ kube_image_repository }}/ks-controller-manager
  ks_controller_manager_tag: {{ kube_image_tag }}
  ks_apiserver_repo: {{ kube_image_repository }}/ks-apiserver
  ks_apiserver_tag: {{ kube_image_tag }}
  ks_console_repo: {{ kube_image_repository }}/ks-console
  ks_console_tag: {{ kube_image_tag }}
  ks_kubectl_repo: {{ kube_image_repository }}/kubectl
  ks_kubectl_tag: {{ kube_image_tag }}
  nginx_ingress_controller_repo: {{ kube_image_repository }}/nginx-ingress-controller
  nginx_ingress_controller_tag: {{ kube_image_tag }}
  {% if ansible_architecture == "aarch64" %}
  defaultbackend_repo: {{ kube_image_repository }}/defaultbackend-arm64
  {% else %}
  defaultbackend_repo: {{ kube_image_repository }}/defaultbackend-amd64
  {% endif %}
  defaultbackend_tag: {{ kube_image_tag }}
  pullPolicy: {{ ks_image_pull_policy }}


serviceAccount:
  create: true
  annotations: {}
  # The name of the service account to use.
  name: "kubesphere"

config:
  create: true

adminPassword: {% if adminPassword is defined %}"{{ adminPassword }}"{% else %}""{% endif %}

console:
  type: {{ common.core.console.type | default('NodePort') }}
  port: {{ common.core.console.port | default(30880)}}

{% if common.core.console.extraVolumeMounts is defined and common.core.console.extraVolumeMounts is not none %}
  extraVolumeMounts:
    {{ common.core.console.extraVolumeMounts | to_nice_yaml(indent=2) | indent(4) }}
{% endif %}

{% if common.core.console.extraVolumes is defined and common.core.console.extraVolumes is not none %}
  extraVolumes:
    {{ common.core.console.extraVolumes | to_nice_yaml(indent=2) | indent(4) }}
{% endif %}

kube_version: {{ kube_version }}

apiserver:
  resources:
    limits:
      cpu: {{ common.core.apiserver.resources.limits.cpu | default('1') }}
      memory: {{ common.core.apiserver.resources.limits.memory | default('1024Mi') }}
    requests:
      cpu: {{ common.core.apiserver.resources.requests.cpu | default('20m') }}
      memory: {{ common.core.apiserver.resources.requests.memory | default('100Mi') }}

controller:
  resources:
    limits:
      cpu: {{ common.core.controllerManager.resources.limits.cpu | default('1') }}
      memory: {{ common.core.controllerManager.resources.limits.memory | default('1000Mi') }}
    requests:
      cpu: {{ common.core.controllerManager.resources.requests.cpu | default('30m') }}
      memory: {{ common.core.controllerManager.resources.requests.memory | default('50Mi') }}
{% if (common.redis is defined and common.redis.enabled is defined and common.redis.enabled) or (enableHA is defined and enableHA) %}
env:
- name: KUBESPHERE_REDIS_PASSWORD
  valueFrom:
    secretKeyRef:
      name: redis-secret
      key: auth
{% endif %}

{% if common.core.nodeAffinity is defined and common.core.nodeAffinity is not none %}
nodeAffinity:
  {{ common.core.nodeAffinity | to_nice_yaml(indent=2) | indent(2) }}
{% else %}
nodeAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
  - weight: 100
    preference:
      matchExpressions:
      - key: node-role.kubernetes.io/master
        operator: In
        values:
        - ""
{% endif %}

nodeSelector:
  {{ control_node_role_name }}: {{ node_role_value }}

{% if common.core.tolerations is defined and common.core.tolerations is not none %}
tolerations:
  {{ common.core.tolerations | to_nice_yaml(indent=2) | indent(2) }}
{% elif tolerations is defined and tolerations is not none %}
tolerations:
  {{ tolerations | to_nice_yaml(indent=2) | indent(2) }}
{% else %}
tolerations:
  - key: node-role.kubernetes.io/master
    effect: NoSchedule
  - key: CriticalAddonsOnly
    operator: Exists
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 60
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 60
{% endif %}